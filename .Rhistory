pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=colors)
# Some more fake data and default colors
morefakedata <- c(5, 3, 2, 6, 8, 1, 3)
pie(morefakedata, clockwise=TRUE, labels=morefakedata)
# Build color ramp and palette
fakemax <- max(morefakedata)
pal2 <- colorRampPalette(c("#f2f2f2", "#821122"))
numshades <- 20
colors2 <- pal2(numshades)
# Make chart with color ramp
morecolors <- c()
for (i in 1:length(morefakedata)) {
colindex <- round((morefakedata[i] / fakemax) * numshades)
morecolors <- c(morecolors, colors2[colindex])
}
pie(morefakedata, clockwise=TRUE, labels=morefakedata, border="white", col=morecolors)
## Contour and Filled Contour map for UFO sightings
# Counts matrix derived using Python/MySQL
cnts <- read.csv("cnt_matrix.txt", header=FALSE)
cnts_matrix <- as.matrix(cnts)
setwd("~/Desktop/Github/flowingdata_tutorials/contour_maps")
# Counts matrix derived using Python/MySQL
cnts <- read.csv("cnt_matrix.txt", header=FALSE)
cnts_matrix <- as.matrix(cnts)
dimnames(cnts_matrix)[[2]] <- NULL
# Transform counts matrix
cnts_matrix <- t(cnts_matrix[105:1,])
# Make the contour map, different levels and colors
contour(cnts_matrix)
contour(log(cnts_matrix+1))
contour(log(cnts_matrix+1), xaxt="n", yaxt="n", nlevels=5, lwd=0.5)
contour(cnts_matrix)
contour(log(cnts_matrix+1))
contour(log(cnts_matrix+1), xaxt="n", yaxt="n", nlevels=5, lwd=0.5)
# Color palettes for contours
bwpal <- colorRampPalette(c("white", "black"))
orangepal <- colorRampPalette(c("white", "#c75a00"))
# Contour with colors
contour(log(cnts_matrix+1), xaxt="n", yaxt="n", nlevels=5, col=bwpal(6))
contour(log(cnts_matrix+1), xaxt="n", yaxt="n", nlevels=10, col=orangepal(12))
contour(log(cnts_matrix+1), xaxt="n", yaxt="n", nlevels=10, col=rainbow(12))
# Palettes for filled contours
redpal <- colorRampPalette(c("black", "red", "white"))
cyanpal <- colorRampPalette(c("black", "cyan", "white"))
purppal <- colorRampPalette(c("black", "purple", "white"))
bluepal <- colorRampPalette(c("black", "blue", "white"))
# Make the filled contour plot
filled.contour(log(cnts_matrix+1), color.palette=redpal, nlevels=5)
filled.contour(log(cnts_matrix+1), color.palette=redpal, nlevels=30)
# Trying different palettes
filled.contour(log(cnts_matrix+1), color.palette=cyanpal, nlevels=30)
filled.contour(log(cnts_matrix+1), color.palette=purppal, nlevels=30)
filled.contour(log(cnts_matrix+1), color.palette=bluepal, nlevels=30)
filled.contour(log(cnts_matrix+1), color.palette=bwpal, nlevels=30)
con <- dbConnect(MySQL(), user="root", password="", dbname="ufo", host="localhost")
#### DEPRECATED - SUPER SLOW IN RETRIEVING COUNTS - USE THE PYTHON SCRIPT INSTEAD
sql_beg <- "SELECT id, lat, lng FROM sightings WHERE MBRContains(GeomFromText('LineString("
sql_end <- ")'), lat_lng)"
# 41.6 -91.6, 42 -91.5
lat_NW <- 50.523427
lng_NW <- -128.847656
lat_SE <- 23.725012
lng_SE <- -61.347656
lats <- seq(lat_NW, lat_SE, by=-.0725)
lngs <- seq(lng_NW, lng_SE, by=.0725)
ufo_matrix <- matrix(nrow=length(lats), ncol=length(lngs))
for (i in 2:length(lats)) {
for (j in 2:length(lngs)) {
sql_full <- paste(sql_beg, lats[i-1], " ", lngs[j-1], ", ", lats[i], " ", lngs[j], sql_end, sep="")
sightings <- dbGetQuery(con, sql_full)
cnt <- length(sightings$id)
ufo_matrix[i, j] <- cnt
}
contour(cnts_matrix)
cnts <- read.csv("cnt_matrix.txt", header=FALSE)
View(cnts)
cnts_matrix <- as.matrix(cnts)
dimnames(cnts_matrix)[[2]] <- NULL
View(cnts_matrix)
# Transform counts matrix
cnts_matrix <- t(cnts_matrix[105:1,])
View(cnts_matrix)
# Make the contour map, different levels and colors
contour(cnts_matrix)
contour(log(cnts_matrix+1))
contour(log(cnts_matrix+1), xaxt="n", yaxt="n", nlevels=5, lwd=0.5)
# Color palettes for contours
bwpal <- colorRampPalette(c("white", "black"))
orangepal <- colorRampPalette(c("white", "#c75a00"))
colorRampPalette(c("white", "black"))
bwpal
bwpal <- colorRampPalette(c("white", "black"))
orangepal <- colorRampPalette(c("white", "#c75a00"))
contour(log(cnts_matrix+1), xaxt="n", yaxt="n", nlevels=5, col=bwpal(6))
contour(log(cnts_matrix+1), xaxt="n", yaxt="n", nlevels=10, col=orangepal(12))
contour(log(cnts_matrix+1), xaxt="n", yaxt="n", nlevels=10, col=rainbow(12))
base <- 'http://www.basketball-reference.com/players/g/georgpa01/gamelog/'
urls <- paste(base,2011:2014,sep = '')
library(plyr)
all_advanced_rs <- data.frame()
all_regular <- data.frame()
for(u in urls){
tables <- readHTMLTable(u,trim=T,as.data.frame=T)
regular <- data.frame(tables['pgl_basic'])
regular$player_gamelog_url <- u
regular$season_type <- 'RS'
all_regular <- rbind.fill(all_regular,regular)
advanced <- data.frame(tables['pgl_advanced'])
advanced$player_gamelog_url <- u
advanced$season_type <- 'RS'
all_advanced_rs <- rbind.fill(all_advanced_rs,advanced)
rm(advanced)
rm(regular)
rm(tables)
}
all_regular$id <- all_regular$player_gamelog_url
all_regular$id <- gsub('http://www.basketball-reference.com/players/g','',all_regular$id)
all_regular$id <-gsub('/gamelog','',all_regular$id)
all_regular <- cbind(all_regular,colsplit(all_regular$id,'\\/',c('a','player_id','season')))
all_regular$a <- NULL
names(all_regular) <- tolower(gsub('pgl_basic.','',names(all_regular)))
all_regular$id <- NULL
all_regular <- all_regular[!all_regular$rk %in% 'Rk',]
names(all_regular)[5] <- 'team_code'
all_regular <- data.frame(all_regular)
names(all_regular)[c(6,30)] <- c('location','home_away')
all_regular$date <- as.Date(all_regular$date,'%Y-%m-%d')
names(all_regular)
all_regular[,c(20:28)] <- apply(all_regular[,c(20:28)],2,as.numeric)
all_advanced_rs$id <- all_advanced_rs$player_gamelog_url
all_advanced_rs$id <- gsub('http://www.basketball-reference.com/players/g','',all_advanced_rs$id)
all_advanced_rs$id <-gsub('/gamelog','',all_advanced_rs$id)
all_advanced_rs <- cbind(all_advanced_rs,colsplit(all_advanced_rs$id,'\\/',c('a','player_id','season')))
all_advanced_rs$a <- NULL
names(all_advanced_rs) <- tolower(gsub('pgl_advanced.','',names(all_advanced_rs)))
all_advanced_rs$id <- NULL
all_advanced_rs <- all_advanced_rs[!all_advanced_rs$rk %in% 'Rk',]
names(all_advanced_rs)[5] <- 'team_code'
names(all_advanced_rs)[6] <- 'location'
all_advanced_rs <- data.frame(all_advanced_rs)
all_advanced_rs$date <- as.Date(all_advanced_rs$date,'%Y-%m-%d')
names(all_advanced_rs)
all_advanced_rs[,c(20:22)] <- apply(all_advanced_rs[,c(20:22)],2,as.numeric)
all_advanced_rs$net_rtg <- all_advanced_rs$ortg - all_advanced_rs$drtg
all_advanced_rs$true_shooting <- 100 * (as.numeric(gsub('\\.','',all_advanced_rs$ts.))/1000)
all <- merge(all_regular,all_advanced_rs)
all <- all[order(all$date,decreasing=F),]
write.csv(all,'paul_george_rs_data.csv')
#########################################################
### A) Installing and loading required packages
#########################################################
if (!require("gplots")) {
install.packages("gplots", dependencies = TRUE)
library(gplots)
}
if (!require("gplots")) {
install.packages("RColorBrewer", dependencies = TRUE)
library(RColorBrewer)
}
#########################################################
### B) Reading in data and transform it into matrix format
#########################################################
data <- read.csv("../datasets/heatmaps_in_r.csv", comment.char="#")
rnames <- data[,1]                            # assign labels in column 1 to "rnames"
mat_data <- data.matrix(data[,2:ncol(data)])  # transform column 2-5 into a matrix
data <- read.csv('https://raw.github.com/rasbt/tutorials_cheatsheets/master/datasets/heatmaps_in_r.csv', comment.char="#")
library(RCurl)
x <- getURL('https://raw.github.com/rasbt/tutorials_cheatsheets/master/datasets/heatmaps_in_r.csv')
data <- read.csv(x,comment.char="#")
data <- read.csv(x)
data <- read.csv(text = x)
View(data)
data <- read.csv(text = x,comment.char='#')
View(data)
x <- getURL('https://raw.github.com/rasbt/tutorials_cheatsheets/master/datasets/heatmaps_in_r.csv')
data <- read.csv(text = x,comment.char='#')
rnames <- data[,1]                            # assign labels in column 1 to "rnames"
mat_data <- data.matrix(data[,2:ncol(data)])  # transform column 2-5 into a matrix
rownames(mat_data) <- rnames                  # assign row names
#########################################################
### C) Customizing and plotting the heat map
#########################################################
# creates a own color palette from red to green
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
# (optional) defines the color breaks manually for a "skewed" color transition
col_breaks = c(seq(-1,0,length=100),  # for red
seq(0,0.8,length=100),              # for yellow
seq(0.8,1,length=100))              # for green
# creates a 5 x 5 inch image
png("../images/heatmaps_in_r.png",    # create PNG for the heat map
width = 5*300,        # 5 x 300 pixels
height = 5*300,
res = 300,            # 300 pixels per inch
pointsize = 8)        # smaller font size
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
dev.off()               # close the PNG device
install_github('slidify', 'ramnathv', ref = 'dev')
library(devtools)
install_github('slidify', 'ramnathv', ref = 'dev')
install_github('rCharts', 'ramnathv', ref = 'dev')
View(all)
library(reshape2)
library(scales)
library(plyr)
library(XML)
library(ggplot2)
url <- 'http://www.basketball-reference.com/leagues/NBA_2014_per_game.html'
tables <- readHTMLTable(url,trim=T,as.data.frame=F)
names(tables)
per_game <- data.frame(tables['per_game'])
View(per_game)
gsub('per_game.','',names(players))
gsub('per_game.','',names(per_game))
tolower(gsub('per_game.','',names(per_game)))
per_game <- tolower(gsub('per_game.','',names(per_game)))
setwd("~/Desktop/Github/flowingdata_tutorials/easy_heatmaps")
nba <- read.csv("ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),]
row.names(nba) <- nba$Name
nba <- nba[,2:20]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10))
data.matrix(nba)
per_game <- data.frame(tables['per_game'])
per_game <- (gsub('per_game.','',names(per_game)))
per_game <- data.frame(tables['per_game'])
per_game <- (gsub('per_game.','',names(per_game)))
per_game <- data.frame(tables['per_game'])
names(per_game) <- (gsub('per_game.','',names(per_game)))
gsub('\\.','_PCT',names(per_game)
)
names(per_game) <- gsub('\\.','_PCT',names(per_game))
per_game <- per_game[order(per_game$PTS),]
View(per_game)
per_game[per_game$Rk %in% 'RK',]
per_game[per_game$Rk %in% 'Rk',]
per_game <- !per_game[per_game$Rk %in% 'Rk',]
per_game <- data.frame(tables['per_game'])
names(per_game) <- (gsub('per_game.','',names(per_game)))
names(per_game) <- gsub('\\.','_PCT',names(per_game))
per_game <- per_game[!per_game$Rk %in% 'Rk',]
per_game <- per_game[order(per_game$PTS,decreasing=T),]
View(per_game)
names(per_game)
View(per_game)
per_game[,c(6:10,12:13,15:16,18:19,21:29)]
per_game[,c(6:10,12:13,15:16,18:19,21:29)] <- apply(per_game[,c(6:10,12:13,15:16,18:19,21:29)],2,as.numeric)
per_game <- per_game[order(per_game$PTS,decreasing=T),]
View(per_game)
names(per_game)
grep('PCT',names(per_game))
per_game[,c(grep('PCT',names(per_game)))]
apply(,per_game[,c(grep('PCT',names(per_game)))],2,function(x) gsub('\\.','',x))
apply(,per_game[,c(grep('PCT',names(per_game)))],2,gsub('\\.',''))
names(per_game)
nba <- per_game[,c(2,6,29,8,9:10,11,18,21:28)]
View(nba)
nba <- per_game[,c(2,6,29,8,9:10,12,18,21:28)]
View(nba)
names(nba)
names(nba)[c(3:16)]
paste(names(nba)[c(3:16)],'Per Game',sep ='')
paste(names(nba)[c(3:16)],' Per Game',sep ='')
names(nba) <- paste(names(nba)[c(3:16)],' Per Game',sep ='')
nba <- per_game[,c(2,6,29,8,9:10,12,18,21:28)]
names(nba) <- paste(names(nba)[c(3:16)],' Per Game',sep ='')
nba <- per_game[,c(2,6,29,8,9:10,12,18,21:28)]
names(nba)[c(3:16)] <- paste(names(nba)[c(3:16)],' Per Game',sep ='')
row.names(nba) <- nba$Player
nba
nba[1:25,]
nba <- nba[1:25,]
row.names(nba) <- nba$Player
nba <- nba[1:20,]
row.names(nba) <- nba$Player
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10))
nba <- per_game[,c(2,6,29,8,9:10,12,18,21:28)]
nba <- nba[1:20,]
row.names(nba) <- nba$Player
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10))
nba <- read.csv("ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),]
row.names(nba) <- nba$Name
nba <- nba[,2:20]
View(nba)
per_game <- per_game[order(per_game$PTS,decreasing=T),]
nba <- nba[1:20,]
row.names(nba) <- nba$Player
names(nba)
nba <- per_game[,c(2,6,29,8,9:10,12,18,21:28)]
View(nba)
nba$Player <- NULL
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10))
nba <- nba[1:20,]
row.names(nba) <- nba$Player
nba <- per_game
nba <- nba[1:20,]
nba <-  nba[,c(2,6,29,8,9:10,12,18,21:28)]
nba$Player <- NULL
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10))
nba <- read.csv("ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),]
View(nba)
nba[,2:20]
View(nba)
nba <- nba[,2:20]
View(nba)
per_game <- per_game[order(per_game$PTS,decreasing=T),]
nba <- per_game
nba <- nba[1:20,]
row.names(nba) <- nba$Player
View(nba)
nba <-  nba[,c(6,29,8,9:10,12,18,21:28)]
View(nba)
per_game <- per_game[order(per_game$PTS,decreasing=T),]
View(per_game)
per_game[per_game$Player == 'Rudy Gay',]
per_game[per_game$Player == 'Rudy Gay'&per_game$Tm == 'SAC',]
per_game[per_game$Player == 'Rudy Gay'&per_game$Tm == 'SAC',] <- NULL
per_game[-per_game$Player == 'Rudy Gay'&per_game$Tm == 'SAC',]
per_game[!per_game$Player == 'Rudy Gay'&per_game$Tm == 'SAC',]
per_game[per_game$Player == 'Rudy Gay'&per_game$Tm == 'SAC',]
per_game[c(157),]
View(per_game)
per_game <- per_game[!per_game$Rk %in% 'Rk',]
per_game[,c(6:10,12:13,15:16,18:19,21:29)] <- apply(per_game[,c(6:10,12:13,15:16,18:19,21:29)],2,as.numeric)
per_game <- per_game[order(per_game$PTS,decreasing=T),]
per_game[per_game$Player == 'Rudy Gay'&per_game$Tm == 'SAC',] <- NULL
per_game[c(157),]
per_game[c(156),]
per_game <- data.frame(tables['per_game'])
names(per_game) <- (gsub('per_game.','',names(per_game)))
names(per_game) <- gsub('\\.','_PCT',names(per_game))
per_game <- per_game[!per_game$Rk %in% 'Rk',]
per_game[,c(6:10,12:13,15:16,18:19,21:29)] <- apply(per_game[,c(6:10,12:13,15:16,18:19,21:29)],2,as.numeric)
per_game[c(156),]
per_game[per_game$Player == 'Rudy Gay'&per_game$Tm == 'SAC',] <- NULL
per_game[per_game$Player == 'Rudy Gay'&per_game$Tm == 'SAC',]
View(per_game)
per_game[per_game$Player == 'Rudy Gay'&per_game$Tm == 'SAC',]
View(per_game)
per_game[c(149,150),]
per_game <- per_game[-c(149,150),]
per_game <- per_game[order(per_game$PTS,decreasing=T),]
nba <- per_game
nba <- nba[1:20,]
row.names(nba) <- nba$Player
nba <-  nba[,c(6,29,8,9:10,12,18,21:28)]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10))
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(15, "Blues"), scale="column", margins=c(5,10))
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10))
?heatmap
nba_heatmap <-
heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10),
main = 'Top 25 NBA Scorers Correlation Matrix'
)
nba_heatmap <-
heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(0,10),
main = 'Top 25 NBA Scorers Correlation Matrix'
)
nba_heatmap <-
heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10),
main = 'Top 25 NBA Scorers Correlation Matrix'
)
nba_heatmap <-
heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10)
)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10)
)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10))
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,20))
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10))
library(plyr)
dat <- read.csv('http://t.co/mN2RgcyQFc')[,c('date', 'pts')]
dat2 <- transform(dat, date = as.numeric(as.POSIXct(date)))
dat3 <- setNames(as.list(dat2$pts), dat2$date)
library(rChartsCalendar)
library(ggplot2)
library(RCurl)
library(XML)
# A function that converts a given integer into its Roman Numeral equivalent
to.RomanNumeral<-function(x) {
if(0 < x & x < 5000) {
x<-as.integer(x)
digits<-c(1000,900,500,400,100,90,50,40,10,9,5,4,1)
numerals<-c("M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I")
digits.numerals<-as.data.frame(cbind(digits,numerals), stringsAsFactors=FALSE)
numeral<-""
for(i in 1:nrow(digits.numerals)) {
while(x >= as.numeric(digits.numerals[i,1])) {
numeral<-paste(numeral,digits.numerals[i,2],sep="")
x<-x-as.numeric(digits.numerals[i,1])
}
return(numeral)
}
else {
stop(paste(x,"is invalid. Input must be an integer between 1 and 4,999"))
}
# Function returns quater scores from Wikipedia Super Bown pages
get.scores<-function(numeral) {
# Base URL for Wikipedia
wp.url<-getURL(paste("http://en.wikipedia.org/wiki/Super_Bowl_",numeral,sep=""))
wp.data<-htmlTreeParse(wp.url, useInternalNodes=TRUE)
score.html<-getNodeSet(wp.data,"//table[@style='background-color:transparent;']")
score.table<-readHTMLTable(score.html[[1]])
score.table<-transform(score.table, SB=numeral)
return(score.table)
}
# Function returns the right-most digit of numer
last.digit<-function(x) {
digits<-strsplit(as.character(x),"")[[1]]
last.digit<-digits[length(digits)]
return(as.numeric(last.digit))
}
# Function takes an nxm matrix of scores and returns a nxn matrix of
# probability of winning given a combination of digits
get.probs<-function(score.df) {
digits.sums<-sum(score.df[,2:11])*10
prob.matrix<-matrix(ncol=10,nrow=10)
for(i in 1:10) {
for(j in 1:10) {
prob.matrix[i,j]<-(score.df[1,i+1]+score.df[2,j+1])/digits.sums
}
prob.df<-as.data.frame(prob.matrix, row.names=0:9)
names(prob.df)<-0:9
return(prob.df)
}
# There have been 45 Super Bowls
bowls<-lapply(1:45, to.RomanNumeral)
# Create data frame of all Super Bowl scores
scores.list<-lapply(bowls, get.scores)
scores.df<-data.frame(do.call(rbind, scores.list))
# Fix the data types
scores.df$X1<-as.numeric(as.character(scores.df$X1))
scores.df$X2<-as.numeric(as.character(scores.df$X2))
scores.df$X3<-as.numeric(as.character(scores.df$X3))
scores.df$X4<-as.numeric(as.character(scores.df$X4))
scores.df$Total<-as.numeric(as.character(scores.df$Total))
# Add quarter scoring data to data frame
wp.url<-getURL(paste("http://en.wikipedia.org/wiki/Super_Bowl_",numeral,sep=""))
palette()
colorRampPalette()
palette()
require(DAAG)
#Show Colors
show.colors(type=c("shades"), order.cols=TRUE)
show.colors(type=c("gray"), order.cols=TRUE)
show.colors(type=c("singles"), order.cols=TRUE)
colors() #list all the named colors
source('~/.active-rstudio-document', echo=TRUE)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Reds"), scale="column", margins=c(5,10))
per_game <- per_game[!per_game$Rk %in% 'Rk',]
per_game[,c(6:10,12:13,15:16,18:19,21:29)] <- apply(per_game[,c(6:10,12:13,15:16,18:19,21:29)],2,as.numeric)
per_game[per_game$Player == 'Rudy Gay'&per_game$Tm == 'SAC',]
per_game <- per_game[-c(149,150),]
per_game <- per_game[order(per_game$PTS,decreasing=T),]
nba <- per_game
nba <- nba[1:20,]
row.names(nba) <- nba$Player
nba <-  nba[,c(6,29,8,9:10,12,18,21:28)]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Reds"), scale="column", margins=c(5,10))
per_game <- per_game[!per_game$Rk %in% 'Rk',]
per_game[,c(6:10,12:13,15:16,18:19,21:29)] <- apply(per_game[,c(6:10,12:13,15:16,18:19,21:29)],2,as.numeric)
per_game[per_game$Player == 'Rudy Gay'&per_game$Tm == 'SAC',]
per_game <- per_game[-c(149,150),]
per_game <- per_game[order(per_game$PTS,decreasing=T),]
nba <- per_game
nba <- nba[1:20,]
row.names(nba) <- nba$Player
nba <-  nba[,c(29,6,8,9:10,12,18,21:28)]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Reds"), scale="column", margins=c(5,10))
?heatmap
x  <- as.matrix(mtcars)
rc <- rainbow(nrow(x), start = 0, end = .3)
cc <- rainbow(ncol(x), start = 0, end = .3)
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Reds"), scale="column", margins=c(5,10),
main = '2013-2014 NBA Leading Scorer Matrix')
op <- par(mar = par("mar")/2)
plot.new()  #
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Reds"), scale="column", margins=c(5,10),
main = '2013-2014 NBA Leading Scorer Matrix')
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Reds"), scale="column", margins=c(0,10),
main = '2013-2014 NBA Leading Scorer Matrix')
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Reds"), scale="column", margins=c(5,10),
main = '2013-2014 NBA Leading Scorer Matrix')
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Reds"), scale="column", margins=c(5,10),
main = '2013-2014 NBA Leading Scorer Matrix')
dev.off()
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Reds"), scale="column", margins=c(5,10),
main = '2013-2014 NBA Leading Scorer Matrix')
